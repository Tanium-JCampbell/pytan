# This is a the default bro integration config file. It is in ini file format,
# with valid section headings of DEFAULT and questionX, where x is an integer.

# Multiple Tanium questions can be specified, and each will be kept alive continuously.

# The text of the question should be a
# valid, parseable Tanium question that retrieves one or more Sensor results from
# endpoints. Filter statements can be used, such as:
#   Get running processes with md5 hash from machines where computer name starts with foo
# To limit the set of machines that return data.

# Questions configured to run in the pytan_bro.ini file will be continually
# asked, and row data will be streamed to the Bro server. It is not advisable
# to ask questions which have sensor data that consists of multiple line, very
# unique values. A good example might be Tanium Trace data that does not have the
# 'make stackable' option set. Executing questions like this repeatedly can
# impact RAM on the server and clients over time, and bandwidth in constrained
# sites.

# All questions are modified to have Computer Name and Tanium Client IP Address
# prepended, as these are required fields in the broker message, and show in
# the Bro log file called conn-tanium.log - an enriched conn.log. See README.txt for details.


# Modify the broker_enabled_bro_host to be the IP or dns name of your bro host
# compiled with broker support, and use the bro port specified in the
# tanium-question-data.bro script, which is installed on the bro host and put into production with 'broctl deploy'
# This will start broker listening on the broker_port defined below.

# DEFAULT section applies config items to all sections missing them. Override
# repeat_seconds for questions defined below which should be issued at a
# different frequency.
[DEFAULT]

[destination]
broker_enabled_bro_host=192.168.160.178
broker_port=9999
# max_log_lines cannot be exceeded or the results of a single question are not
# sent to bro. A value of 0 means no limit. If this were not set, a default value
# of 10,000 is used.
# It is important to note that for multi-line sensor results for a multi-sensor
# question, there is one line entry for each column combination, without repetition.
# This means there is a far greater than first expected number of rows sent to bro.
# The reason this is done is to make it simpler to grep for data in the bro logs.
# default is no limit
max_log_lines=0

# Question sections.
# for each question section, which looks like [questionN], define the data to be pulled into the conn-tanium.log file.
# The question is modified such that Computer Name, Tanium Client IP Address, and Last Logged In User is always
# prepended. The client IP address is retained on the bro side, used as a key to match connection data from bro to
# all of the data returned by the Tanium question - again, with the three fields mentioned automatically also added.
#
# For any question defined, also modify tanium-question-data.bro which is to be deployed to bro infrastructure.
# the default question has an entry in the export { area that looks like this:
#    type question1: record {
#            question_timestamp:     time &log;
#            host:                   string &log;
#            ip:                     addr &log;
#            last_logged_in_user:    string &log;
#            model:                  string &log;
#            computer_serial_number: string &log;
#            };
# ...
# global QuestionData_question1: event(question: question1);
# ...
# event Tanium::QuestionData_question1(question: question1)
#    {
#    Log::write( Tanium::LOG_question1, question );
#
#    ip_to_user[question$ip] = question$last_logged_in_user;
#
#    # Modify: Uncomment in order to see the data on stdout.
#    # print "Broker received Tanium Question Data", question;
#    }

[question1]
question=Get Model and Computer Serial Number from all machines

#Typically there is only one question defined, but others are considered.
# [question2]
# question=Get running processes with md5 hash from all machines
#
# This question would require a custom entry in tanium-question-data.bro. The export { area looks like this:
#    type question2: record {
#            question_timestamp:     time &log;
#            host:                   string &log;
#            ip:                     addr &log;
#            last_logged_in_user:    string &log;
#            path:                   string &log;
#            md5_hash:               string &log;
#            };
# ...
# global QuestionData_question2: event(question: question2);
# ...
# event Tanium::QuestionData_question2(question: question2)
#    {
#    Log::write( Tanium::LOG_question2, question );
#
#    # Modify: Uncomment in order to see the data on stdout.
#    # print "Broker received Tanium Question Data", question;
#    }
